"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mock_1 = require("./mock");
const getFrameMessage_1 = require("./getFrameMessage");
const neynarUserFunctions_1 = require("../utils/neynar/user/neynarUserFunctions");
const neynarFrameFunctions_1 = require("../utils/neynar/frame/neynarFrameFunctions");
jest.mock('../utils/neynar/user/neynarUserFunctions', () => {
    return {
        neynarBulkUserLookup: jest.fn(),
    };
});
jest.mock('../utils/neynar/frame/neynarFrameFunctions', () => {
    return {
        neynarFrameValidation: jest.fn(),
    };
});
describe('getFrameValidatedMessage', () => {
    it('should return undefined if the message is invalid', async () => {
        const result = await (0, getFrameMessage_1.getFrameMessage)({
            trustedData: { messageBytes: 'invalid' },
        });
        expect(result?.isValid).toEqual(false);
    });
    it('should return the message if the message is valid', async () => {
        const fid = 1234;
        const addresses = ['0xaddr1'];
        (0, mock_1.mockNeynarResponse)(fid, addresses, neynarUserFunctions_1.neynarBulkUserLookup, neynarFrameFunctions_1.neynarFrameValidation);
        const fakeFrameData = {
            trustedData: {},
        };
        const result = await (0, getFrameMessage_1.getFrameMessage)(fakeFrameData);
        expect(result?.message?.interactor.fid).toEqual(fid);
    });
});
//# sourceMappingURL=getFrameMessage.test.js.map